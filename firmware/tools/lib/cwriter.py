import io
import os

class cwriter:
  def __init__(self) -> None:
    pass

  def __filename(self, file: str) -> str:
    split = file.replace("\\", "/").split("/")
    return split[len(split) - 1]

  def __write_header(self) -> None:
    self.fp.write("// This file is automatically generated by script.\n")
    self.fp.write("// Embedded file: %s\n\n" % self.fname)
    self.fp.write("#ifndef _EMBEDDED_%s_H\n" % self.cmacro)
    self.fp.write("#define _EMBEDDED_%s_H\n\n" % self.cmacro)
    self.fp.write("const unsigned char %s[] = {\n" % self.cfname)

  def __write_hexdata(self) -> None:
    for i in range(0, len(self.data), 16):
      self.fp.write("\t")
      for j in range(0, 16):
        if i + j < len(self.data):
          self.fp.write("0x%02X, " % self.data[i + j])
        else:
          self.fp.write("0x00, ")
      self.fp.write("\n")

  def __write_footer(self) -> None:
    self.fp.write("};\n\n")
    self.fp.write("#endif /* _EMBEDDED_%s_H */\n" % self.cmacro)
    
  def open(self, ifile: str, ofile: str) -> None:
    self.fp = open(ofile, "wt")
    self.fp.seek(io.SEEK_SET, 0)
    self.fname = self.__filename(ifile)
    self.cfname = os.path.basename(ifile).replace(".", "_")
    while(self.cfname.find("__") != -1): self.cfname = self.cfname.replace("__", "_")
    if(self.cfname[0] == "_"): self.cfname = self.cfname[1:]
    self.cmacro = self.cfname.upper()
    self.data = bytearray()

  def writeall(self) -> None:
    self.__write_header()
    self.__write_hexdata()
    self.__write_footer()

  def append(self, data: bytes) -> None:
    self.data += bytearray(data)

  def close(self) -> None:
    self.fp.close()
    self.fp = None
